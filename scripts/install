#!/bin/bash

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "${DIR}/utils/log"

DOTFILES_DIR="$HOME/.dotfiles"

_log_random_color

_log_border
_log_line ' ██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗ '
_log_line ' ██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝ '
_log_line ' ██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗ '
_log_line ' ██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║ '
_log_line ' ██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║ '
_log_line ' ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝ '
_log_line
_log_line ' This needs improvement* '
_log_border


cd $HOME

homebrew() {
  #install homebrew if missing
  if ! command -v brew >/dev/null; then
    log_success "Installing Homebrew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    log_success "Homebrew already installed"
  fi
  log_success "Brewing Stow"
  brew install stow
}

dotfiles(){
  #clone dotfiles if missing
  if [[ ! -d "$HOME/.dotfiles" ]]; then
    log_success "Cloning filipekiss/dotfiles"
    mkdir "$HOME/.dotfiles"
    git clone --recursive https://github.com/filipekiss/dotfiles.git "$HOME/.dotfiles"
  else
    log_success "Updating filipekiss/dotfiles"
    cd $HOME/.dotfiles && \
    git pull origin master && \
    git stash && \
    git checkout master && \
    git reset --hard origin/master && \
    git submodule update --init --recursive && \
    git checkout - && \
    git stash pop
  fi
}

dotfiles()
homebrew()

_log_random_color

_log_border
_log_line '*This always needs improvement'
_log_border
