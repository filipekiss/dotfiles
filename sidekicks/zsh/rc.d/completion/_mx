#compdef mx

# vim:ft=zsh:

# mx completion
# --------------------------------------------------------------------------------------------------

# Description
# -----------
# An auto-complete function for my mx needs.
# --------------------------------------------------------------------------------------------------
# Authors
# -------
# Filipe Kiss <eu@filipekiss.com.br> http://github.com/filipekiss
# --------------------------------------------------------------------------------------------------

_mx() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments \
        ':Project Namespace:->namespace'\
        ':Project:->project'

    case $state in
        (namespace)
            _arguments '1:Project Namespace:__zsh_complete_namespace'
            ;;
        (project)
            _arguments '2:Project:__zsh_complete_project'
    esac
}

__zsh_complete_namespace() {
    local namespaces
    [[ -n $DOTFILES ]] && _description=("dotfiles:$DOTFILES") || typeset -a _description
    _description+=($(_list_available_namespaces))
    _describe -t namespace "Project Namespace" _description
}

__zsh_complete_project() {
    [[ $words[2] == "dotfiles" ]] && return 0
    _description=("${(@f)$(_list_available_projects $words[2])}")
    _describe -t project "Listing projects | ${words[2]}" _description
}


_fzf_complete_mx() {
    local words state
    # Convert string to array, just like the $words we use for the zsh completion
    words=(${=@})
    state="command"
    [[ ${#words[@]} == "1" ]] && state="namespace"
    [[ ${#words[@]} == "2" ]] && state="project"
    case $state in
        (namespace)
            __fzf_complete_mx_namespace "${words} "
            ;;
        (project)
            __fzf_complete_mx_project "${words} " $words[2]
            ;;
    esac
}

__fzf_complete_mx_namespace(){
    _fzf_complete "--reverse --no-multi --header-lines=1" "$@" < <(
        echo "Project Namespace"
        _list_available_namespaces |
            cut -d ':' -f1
    )
}


__fzf_complete_mx_project(){
    _fzf_complete "--reverse --no-multi --header-lines=1" "$@" < <(
        echo "Select Project for $2"
        _list_available_projects "$2" |
            cut -d ':' -f1
    )
}

_list_available_namespaces() {
    local home_namespaces project_namespaces _description
    _description=()
    [[ -z $PROJECTS ]] && PROJECTS=$HOME

    if [[ -n $PROJECTS ]]; then
        project_namespaces=($(find ${PROJECTS}/* -maxdepth 0 -type d -not -path '*/\.*' -not -iwholename '*/forks' -printf '%f\n'))
        if [[ -d "${PROJECTS}/forks" ]]; then
            [[ -n $project_namespaces ]] && _excluded_from_forks="-not -iwholename '*/${(j:' -not -iwholename '\*\/:)project_namespaces}'"
            forks_namespaces=($(eval "find ${PROJECTS}/forks/* -maxdepth 0 -type d ${_excluded_from_forks:-} -not -path '*/\.*' -printf '%f\n'"))
        fi
        for namespace in $project_namespaces; do
            _description+=("${namespace}:${PROJECTS}/${namespace}")
        done;
        for namespace in $forks_namespaces; do
            _description+=("${namespace}:${PROJECTS}/forks/${namespace}")
        done;
    fi

    echo ${(iF)_description}
}

_list_available_projects() {
    local _selected_namespace _description
    _selected_namespace="$1"
    typeset -a _description
    if [[ -d ${PROJECTS}/${_selected_namespace} ]]; then
        _projects_available=($(find ${PROJECTS}/${_selected_namespace}/* -maxdepth 0 -type d))
    fi
    if [[ -d ${PROJECTS}/forks/${_selected_namespace} ]]; then
        _projects_available+=($(find ${PROJECTS}/forks/${_selected_namespace}/* -maxdepth 0 -type d))
    fi
    for project in $_projects_available; do
        _session_description="${project/#${HOME}/~}"
        if tmux has-session -t "${_selected_namespace}/${project:t}" > /dev/null 2>&1; then
            _session_description="â†’ Go to session"
        fi
        echo "${project:t}:${_session_description}"
    done;
}

_get_project_path() {
    local NAMESPACE_PATH _selected_namespace
    _selected_namespace="$1"
    [[ -d ${PROJECTS}/${_selected_namespace} ]] && NAMESPACE_PATH=${PROJECTS}/${_selected_namespace} || NAMESPACE_PATH=${HOME}/${_selected_namespace}
    echo $NAMESPACE_PATH
}
