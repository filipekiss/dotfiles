#!/usr/bin/env zsh

function emoji_list() {
    local FILE_PATH=$(git rev-parse --show-toplevel)/.precommit
    local EMOJI_LIST=(
    ':art: Improving the format/structure of the code|:art:'
    ':memo: Writing docs|:memo:'
    ':100: Adding a new feature|:100:'
    ':bug: Fixing a bug|:bug:'
    ':fire: Removing code or files|:fire:'
    ':white_check_mark: Adding tests|:white_check_mark:'
    ':lock: Dealing with security|:lock:'
    '')
    # If .precommit file exists in the root of the repo, use that instead of the default list
    if [[ -e $FILE_PATH ]]; then
        EMOJI_LIST=("${(@f)$(<$FILE_PATH)}")
    fi
    local select=()
    select+=("Nothing")
    for currentLine in $EMOJI_LIST; do
	    local displayText=$(echo $currentLine | cut -d '|' -f1)
	    local prependText=$(echo $currentLine | cut -d '|' -f2)
        prependText=" | "$prependText
	    if [[ $HAS_EMOJIFY ]]; then
		    displayText=$(echo $displayText | emojify)
	    fi
	    select+=$displayText$prependText
    done
    echo ${(j:\n:)select}
}

function join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

function fzf_select_emoji() {
    emoji_list |
    fzf --multi --ansi --header "Use <TAB> to select multiple" |
    grep '|' |
    cut -d '|' -f2 |
    join-lines
}

function fzf_prepare_message() {
    local COMMIT_MESSAGE_FILE="$1"
    local COMMITS_MESSAGE_CONTENT=$(cat ${COMMIT_MESSAGE_FILE})
    local MESSAGE_TYPE="$2"
    local SHOW_EMOJI_SELECTOR=false
    [[ -z $MESSAGE_TYPE ]] && MESSAGE_TYPE="message"
    case $MESSAGE_TYPE in
	message|template)
	    if [[ $HAS_FZF ]]; then
            SHOW_EMOJI_SELECTOR=true
	    fi
	;;
    esac
    if $SHOW_EMOJI_SELECTOR; then
        local prepend_emojis=$(fzf_select_emoji)
        echo ${prepend_emojis}" "${COMMITS_MESSAGE_CONTENT} | tee ${COMMIT_MESSAGE_FILE}
    fi
}

function validate_emoji_selector() {
    HAS_FZF=$commands[fzf]
    HAS_EMOJIFY=$commands[emojify]
}

validate_emoji_selector
[[ -z $HAS_FZF ]] && echo " No fzf found... Skipping precommit selector" && exit 0
fzf_prepare_message "$1" "$2" "$3"
