[user]
	name = Filipe Kiss
	email = eu@filipekiss.com.br

[dotfiles]
    decrypted = false

[commit]
    gpgsign = true
	verbose = true

[include]
    path = ~/.gitconfig.local

[alias]
    a = add -v
    all = add -v .
    amend = commit --amend -C HEAD
    ap = add -p
    assume = update-index --assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    br = branch
    branch-name = rev-parse --abbrev-ref HEAD
    cb = checkout -b
    changelog = log --reverse --no-merges --format='* %s'
    ci = commit
    co = checkout
    conflict = diff --name-only --diff-filter=U
    count = rev-list --count
    current = "!git branch-name"
    d = diff --patch-with-stat
    dc = diff --patch-with-stat --staged
    diffc = diff --cached
    discard = checkout --
    dm = diff --patch-with-stat --word-diff-regex=.
    dw = diff --color-words
    feature = flow feature
    full-status = status --porcelain --untracked-files=all
    gr = log --graph --full-history --all --color --decorate
    hotfix = flow hotfix
    ici = commit --allow-empty -m \":tada: Initial Commit\"
    ignored = ls-files --others -i --exclude-standard
    last = log --pretty=format:'%s' --abbrev-commit -1
    latest-tag = "!git describe --tags `git rev-list --tags --max-count=1`"
    lg = log --color --graph --pretty=format:'%Cblue%h%Creset -%C(yellow)%d%Creset %C(white)%s%C(reset)%Cgreen(%cr) %C(bold blue)<%an [%G?]>%Creset' --abbrev-commit
    me = "!git log --author=$(whoami)"
    nb = "!f() { echo 'Creating branch from '$(git latest-tag); git checkout -b $1 $(git latest-tag); }; f";
    nmg = branch --no-merged
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    patch = !git --no-pager diff --no-color
    patch = add -v -p
    pr = pull-request -b
    ps = push
    purr = pull --rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip
    rci = "!git recommit"
    recommit = commit --amend --no-edit
    release = flow release
    root = rev-parse --show-toplevel
    st = status -sb
    support = flow support
    tags = tag -l
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
    track = push origin -u HEAD
    unassume = update-index --no-assume-unchanged
    unpushed = log @{u}..
    unstage = reset HEAD
    update-commit = "!git a . && git ci --amend --no-edit"
    update-submodules = "!git submodule -q foreach git pull -q origin master"
    van = add -vAn
    w = whatchanged  --pretty=format:\"%C(blue)%h %Creset- %C(green)(%cr) %C(cyan)<%aN> %Creset%aE %C(magenta)%d %n %C(yellow)%s %n%Creset\" --date=short
    wip = rebase -i @{u}
    who = shortlog -sne
    wipe = !git reset --hard HEAD && git clean -fd
	ctags = !~/.dotfiles/config/git/hooks/utils/ctags

[push]
    default = current

[core]
    excludesfile = ~/.gitignore_global
    filemode = false
    mergeoptions = --no-edit
    # https://news.ycombinator.com/item?id=11388479
	untrackedCache = true
    editor = $EDITOR
	whitespace = trailing-space,space-before-tab # Git will check for whitespace at $ and mixed spaces and tabs
	hooksPath = ~/.dotfiles/config/git/hooks

[color]
    diff = auto
    interactive = auto
    ui = true

[color "branch"]
    current = blue bold ul
    local = yellow italic
    remote = green

[color "diff"]
    meta = yellow
    frag = cyan
    old = red strike
    new = green bold
    whitespace = yellow reverse

[color "status"]
    added = green bold
    changed = blue bold
    untracked = red

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[branch]
    autosetuprebase = always

[dotfiles]
    managed = true

[fetch]
	prune = true
#
# URL shorthands
[url "git@github.com:"]
    insteadOf     = gh:
    pushInsteadOf = github:
    pushInsteadOf = git://github.com/

[url "git://github.com/"]
    insteadOf = github:

[url "git@gist.github.com:"]
    insteadOf     = gst:
    pushInsteadOf = gist:
    pushInsteadOf = git://gist.github.com/

[url "git://gist.github.com/"]
    insteadOf = gist:

[url "git@github.com:filipekiss/"]
    insteadOf     = me:
    pushInsteadOf = me:
    pushInsteadOf = https://github.com/filipekiss/
    pushInsteadOf = http://github.com/filipekiss/
    pushInsteadOf = git://github.com/filipekiss/

[url "git@gitlab.com:"]
    insteadOf     = gitlab:
    insteadOf     = git://gitlab.com/
    pushInsteadOf = git://gitlab.com/
    pushInsteadOf = https://gitlab.com/
    pushInsteadOf = http://gitlab.com/

[url "git@gitlab.com:"]
    insteadOf = gl:
    pushInsteadOf = gitlab:
    pushInsteadOf = git://gitlab.com/

[url "git://gitlab.com/"]
    insteadOf = gitlab:



[merge]
    conflictstyle = diff3
	stat = true # Show diffstat after every merge

[pager]
    diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified|renamed): '
    show = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified|renamed): '

[interactive]
    diffFilter = diff-so-fancy --patch-mode | less --tabs=4 -RFX

[github]
	user = filipekiss


[pull]
	rebase = true
# ------------------------------
# Disable a few of Git help messages
# ------------------------------
[advice]
	statusHints = false # Disable "how to stage/unstage/add" hints
	pushNonFastForward = false # Disable fast-forward advice (Still show the push was rejected)

[diff]
	renames = copies # Allow git to do basic copy/rename detection
	mnemonicprefix = true # Git Diff uses mnemonics (<i>ndex, <w>ork treeâ€¦) instead of a/b notation
# ------------------------------
# Record resolved conflicts
#
# This option allows git to record steps to resolve conflicts, so identical hunks will be
# automatically resolved later on
# ------------------------------
[rerere]
	enabled = true

[protocol "keybase"]
	allow = always

[rebase]
    # This will format the text when rebasing interactively like the example below:
    # pick a5bce56 [Filipe K..] Ensure socket is valid .. [.. 4 Jan 2018 17:06:55 -0200]
    instructionFormat = [%<(10,trunc)%aN] %<(30,trunc)%s [%<(28,ltrunc)%cD]
