#!/usr/bin/env bash

# mx
# --------------------------------------------------------------------------------------------------
#
# Description
# -----------
# mx is a tmux start script to keep things organized
# --------------------------------------------------------------------------------------------------

# Contributors
# ------------
# Wynn Netherland - https://github.com/pengwynn
# Adam Jahnke - https://github.com/adamyonk
# Filipe Kiss <eu@filipekiss.com.br> http://github.com/filipekiss
# --------------------------------------------------------------------------------------------------
#
# Version
# -------
# 4.1.0
# --------------------------------------------------------------------------------------------------
#
# Usage
# -----
# mx <session name> [project]
#
# Arguments
# ---------
# All Arguments are optional.
#
# If no arguments are passed, mx will use the current folder name as a session name with proper
# escaping to ensure tmux compatibility
#
# session name
# ------------
# If a session name is passed, mx will do a few checks before putting you inside the session.
#
# First, it will check if you're trying to start a session that matches the 'dotfiles' name. If you
# are, mx will create a session for your dotfiles and set the WORKINGDIR to $HOME/.dotfiles
#
# If you're session is not 'dotfiles', mx will look for a folder with the same name under your home
# folder. So, for example, let's say you have a $HOME/work folder and you call `mx work`. Here's
# what mx will do:
#
#  * Will find the folder located at $HOME/work
#  * Will see if there's a session named work already. If there is, attach to it.
#  * If there's not a session, it will continue with it's own instructions to create the proper
#  session and then will attach you to it
#
# Finally, if you have a $PROJECTS variable set in you environment and there's a folder located at
# $PROJECTS/<session name>, mx will do the same steps as if it were in you $HOME
#
# project
# -------
# If you pass a second argument and you have a folder at this structure: $PROJECTS/<session name>/<project
# name>, it will open the project at the correct location. For example, I keep my projects in
# a `code` folder under my home dir. So my `pure` fork, por example, sits at $HOME/code/filipekiss/pure
# I can just call `mx filipekiss pure` and mx will set everything up for me, leaving me ready to
# work.
#
# Combined namespace/project name at session title
# ------------------------------------------------
# Sometimes I wish to work on multiple projects of the same namespace (let's say my
# [filipekiss/quick-tips] and my filipekiss/secret-projects). To achieve this, If `mx` receives
# a second argument, it will be appended to the session name. So `mx filipekiss quick-tips` will
# start a session name *filipekiss/quick-tips* on the directory $PROJECTS/filipekiss/quick-tips.
# If you wish to maintain a single session for each given "namespace", just set MX_UNIQUE_SESSIONS
# on your shell (put export MX_UNIQUE_SESSIONS="1" in your `~/.bashrc` or `~/.zshrc`).
# --------------------------------------------------------------------------------------------------
#
# Start script
# ------------
# If you have a file named `start` at the current $WORKINGDIR and that file is executable, mx will
# execute that file instead of doing the usual 50/50 split. You can use this to customize your
# layout (using tmux commands from the cli), open files, update dependencies or something like that.
# --------------------------------------------------------------------------------------------------


set -e
source dotfiles "source"


if [ -z "$1" ]; then
  SESSION="${PWD##*/}"
else
    _try_command="mx-$1"
    if [[ -n $(type -p $_try_command) ]]; then
        exec $_try_command
        exit 0
    fi
  SESSION="$1"
fi

# tmux 1.9a+ doesn't like .'s in session names
SESSION="${SESSION//./_}"
[[ "$SESSION" == *'dotfiles' ]] && SESSION='dotfiles'

if [[ -n "$2" && -z $MX_UNIQUE_SESSIONS ]]; then
    PROJECT_NAME="$2"
    SESSION="${SESSION}/${PROJECT_NAME//./}"
fi

if ! (tmux has-session -t "${SESSION}" > /dev/null 2>&1); then
    WORKINGDIR=""

    twidth=$(tput cols)
    theight=$(tput lines)

    if [[ "$SESSION" == 'dotfiles' && -d "$HOME/.dotfiles" ]]; then
        e_info "Using dotfiles settings"
        WORKINGDIR="${HOME}/.dotfiles"
    elif [ -d "${HOME}/${SESSION}/${PROJECT_NAME}" ]; then
        e_info "Found project at ${HOME}/${SESSION}/${PROJECT_NAME}"
        WORKINGDIR="$HOME/$SESSION/$PROJECT_NAME"
    elif [ -d "${HOME}/${SESSION}" ]; then
        e_info "Found project at ${HOME}/${SESSION}"
        WORKINGDIR="$HOME/$SESSION"
    elif [ -d "$PROJECTS"/"$SESSION"/"$PROJECT_NAME" ]; then
        e_info "Found project at ${HOME}/${SESSION}/$PROJECT_NAME"
        WORKINGDIR="$PROJECTS"/"$SESSION"/"$PROJECT_NAME"
    elif [ -d "$PROJECTS"/"$SESSION" ]; then
        e_info "Found project at ${PROJECTS}/${SESSION}"
        WORKINGDIR="$PROJECTS"/"$SESSION"
    else
        e_info "Using current directory: $PWD"
        WORKINGDIR="$PWD"
    fi

    tmux new-session -s "$SESSION" -n editor -d -c $WORKINGDIR -x $twidth -y $theight
    # If there's a start script and it has +x permissions, execute it
    if  [ -x "${WORKINGDIR}/.mx-start" ]; then
        tmux send-keys -t "$SESSION" "${WORKINGDIR}/.mx-start" C-m
    # Else, run the default config: Split 50/50 with editor on left and shell on $WORKINGDIR on right
    else
        tmux send-keys -t "$SESSION" "$EDITOR" C-m
        tmux split-window -h -p 50 -c $WORKINGDIR -t "$SESSION"
        tmux new-window -d -n 'shell' -t "$SESSION" -c $WORKINGDIR
    fi
    tmux select-window -t 1
    tmux select-pane -t 1
fi

if [ -z "$TMUX" ]; then
  tmux attach -t "$SESSION"
else
  tmux switch-client -t "$SESSION"
fi
