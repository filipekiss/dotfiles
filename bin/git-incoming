#!/usr/bin/env sh
_parse_arguments() {
    local    arg
    while (( $# > 0 ))
    do
        arg="$1"
        case "$arg" in
            --force)
                _force_fetch="yes"
                ;;
            *)
                ;;
        esac
        shift
    done
    return 0
}

_get_branch_details() {
    _current_branch=$(git rev-parse --abbrev-ref HEAD)
    _tracking_branch=$(git config branch.$_current_branch.merge)
    _tracking_remote=$(git config branch.$_current_branch.remote)
    _tracking_remote_branch_name=${_tracking_branch#"refs/heads/"}
    _remote_url=$(git config remote.$_tracking_remote.url)
}

_fetch_origin_if_needed() {
    _last_fetch=$(git config gitincoming.lastFecth || echo 0)
    _cache_duration=$(git config gitincoming.cacheDuration || echo 3600)
    _current_time=$(date +%s)
    _next_fetch=$((_last_fetch + _cache_duration))
    [[ ${_current_time} -ge ${_next_fetch} ]] && _should_fetch_remote="yes"
    if [[ -n ${_should_fetch_remote} || -n ${_force_fetch} ]]; then
        git fetch ${_tracking_remote} && git config gitincoming.lastFetch $(date +%s)
    fi
}

_show_log() {
    local binaryName=$(basename $0)
    local actionName=${binaryName#git-}
    case "$actionName" in
        incoming)
            git log ..${_tracking_remote}/${_tracking_remote_branch_name}
            ;;
        outgoing)
            git log ${_tracking_remote}/${_tracking_remote_branch_name}..
            ;;
    esac
}

main() {
    _parse_arguments $@
    _get_branch_details
    [[ -z ${_tracking_remote} || ${_tracking_remote} == "." ]] && \
        echo "This branch is not tracking anything remote." && \
        echo "Use git branch --set-upstream-to=<remote/branch> and try again" && \
        exit 1
    _fetch_origin_if_needed
    _show_log
}

main $@
